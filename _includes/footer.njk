<footer class="footer">
  <div class="footer__top container">
    <p class="footer__contact">
      <a class="footer__tel" href="tel:88006003264">8 800 600 32 64</a><br>
      <small class="footer__time">Ежедневно с 10:00 до 21:00</small>
    </p>
    <img class="footer__logo" src="{{ '/static/img/logo_full.svg' | url }}" alt="Нейро-Пси" width="202" height="126">
    <div class="footer__social_list">
      <a class="footer__social_link" href=""><img class="footer__social_img" src="{{ '/static/img/fb.svg' | url }}" width="8" height="16" alt="Фейсбук"></a>
      <a class="footer__social_link" href=""><img class="footer__social_img" src="{{ '/static/img/twitter.svg' | url }}" width="16" height="16" alt="Твиттер"></a>
      <a class="footer__social_link" href=""><img class="footer__social_img" src="{{ '/static/img/ig.svg' | url }}" width="16" height="16" alt="Инстаграм"></a>
    </div>
    <ul class="footer__list">
      {%- for entry in metadata.footNav %}
        <li class="footer__item{% if entry.url == page.url %} footer-item--active{% endif %}">
          <a class="footer__link" href="{{ entry.url | url }}">{{ entry.label }}</a>
        </li>
      {%- endfor %}
    </ul>
  </div>
  <div class="footer__divider"></div>
  <div class="footer__bottom container">
    <div class="footer__text">
      <p>Консультации и информационные услуги оказывают ООО «Нейрология». 0+ Для постановки диагноза и назначения плана лечения следует записаться на очный прием к специалисту</p>
      <p>На сайте используются куки. <a href="" class="footer__text_link">Что это значит?</a></p>
      <a href="" class="footer__text_link">Политика обработки и защиты персональных данных</a>
      <p>© 2021 ООО «Нейрология». <span class="text--nowrap">Лицензия №ЛО-77-01-018632</span></p>
    </div>
    <a class="footer__studio" href="https://lepekhin.studio">
      <img class="footer__studio_img" src="{{ '/static/img/lepekhin.svg' | url }}" alt="Лепёхин" width="82" height="32">
      <span class="footer__studio_caption">Задизайнено<br>в Студии Евгения Лепёхина</span>
    </a>
  </div>
</footer>
{% if hasLightbox === true %}
  <!-- На страницах с просмотром картинок подключаем photoswipe -->
  <link rel="stylesheet" href="{{ '/static/css/photoswipe.css' | url }}">
  <link rel="stylesheet" href="{{ '/static/css/default-skin/default-skin.css' | url }}">
  <script src="{{ '/static/js/photoswipe.min.js' | url }}"></script>
  <script src="{{ '/static/js/photoswipe-ui-default.min.js' | url }}"></script>
  <!-- Root element of PhotoSwipe. Must have class pswp. -->
  <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

    <!-- Background of PhotoSwipe.
         It's a separate element as animating opacity is faster than rgba(). -->
    <div class="pswp__bg"></div>

    <!-- Slides wrapper with overflow:hidden. -->
    <div class="pswp__scroll-wrap">

      <!-- Container that holds slides.
          PhotoSwipe keeps only 3 of them in the DOM to save memory.
          Don't modify these 3 pswp__item elements, data is added later on. -->
      <div class="pswp__container">
        <div class="pswp__item"></div>
        <div class="pswp__item"></div>
        <div class="pswp__item"></div>
      </div>

      <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
      <div class="pswp__ui pswp__ui--hidden">

        <div class="pswp__top-bar">

          <!--  Controls are self-explanatory. Order can be changed. -->

          <div class="pswp__counter"></div>

          <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

          <button class="pswp__button pswp__button--share" title="Share"></button>

          <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

          <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

          <!-- Preloader demo https://codepen.io/dimsemenov/pen/yyBWoR -->
          <!-- element will get class pswp__preloader--active when preloader is running -->
          <div class="pswp__preloader">
            <div class="pswp__preloader__icn">
              <div class="pswp__preloader__cut">
                <div class="pswp__preloader__donut"></div>
              </div>
            </div>
          </div>
        </div>

        <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
          <div class="pswp__share-tooltip"></div>
        </div>

        <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
        </button>

        <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
        </button>

        <div class="pswp__caption">
          <div class="pswp__caption__center"></div>
        </div>

      </div>

    </div>

  </div>
  <script>
    var initPhotoSwipeFromDOM = function(gallerySelector) {

      // parse slide data (url, title, size ...) from DOM elements
      const openPhotoSwipe = function(index, galleryElement, disableAnimation, fromURL) {
        let pswpElement = document.querySelector('.pswp'),
          gallery,
          options,
          items;

        items = parseThumbnailElements(galleryElement);

        // define options (if needed)
        options = {
          shareEl: false,

          // define gallery index (for URL)
          galleryUID: galleryElement.getAttribute('data-pswp-uid'),

          getThumbBoundsFn: function(index) {
            const thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail
              pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
              rect = thumbnail.getBoundingClientRect();

            return {x:rect.left, y:rect.top + pageYScroll, w:rect.width};
          }

        };

        // PhotoSwipe opened from URL
        if(fromURL) {
          if(options.galleryPIDs) {
            // parse real index when custom PIDs are used
            // http://photoswipe.com/documentation/faq.html#custom-pid-in-url
            for(let j = 0; j < items.length; j++) {
              if(items[j].pid === index) {
                options.index = j;
                break;
              }
            }
          } else {
            // in URL indexes start from 1
            options.index = parseInt(index, 10) - 1;
          }
        } else {
          options.index = parseInt(index, 10);
        }

        // exit if index not found
        if( isNaN(options.index) ) {
          return;
        }

        if(disableAnimation) {
          options.showAnimationDuration = 0;
        }

        // Pass data to PhotoSwipe and initialize it
        gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);
        gallery.init();
      };
// (children of gallerySelector)
      const parseThumbnailElements = function(el) {
        let thumbElements = el.childNodes,
          numNodes = thumbElements.length,
          items = [],
          figureEl,
          linkEl,
          item;

        for(let i = 0; i < numNodes; i++) {

          figureEl = thumbElements[i]; // <figure> element

          // include only element nodes
          if(figureEl.nodeType !== 1) {
            continue;
          }

          linkEl = figureEl.children[0]; // <a> element

          // create slide object
          item = {
            src: linkEl.getAttribute('href')
          };



          if(figureEl.children.length > 1) {
            // <figcaption> content
            item.title = figureEl.children[1].children[0].innerText;
          }

          if(linkEl.children.length > 0) {
            // <img> thumbnail element, retrieving thumbnail url
            item.msrc = linkEl.children[0].getAttribute('src');
            // item.w = parseInt(linkEl.children[0].getAttribute('width'), 10);
            // item.h = parseInt(linkEl.children[0].getAttribute('height'), 10);
            item.w = window.innerWidth;
            item.h = window.innerHeight;
          }

          item.el = figureEl; // save link to element for getThumbBoundsFn
          items.push(item);
        }

        return items;
      };

      // find nearest parent element
      const closest = function closest(el, fn) {
        return el && (fn(el) ? el : closest(el.parentNode, fn));
      };

      // triggers when user clicks on thumbnail
      const onThumbnailsClick = function (e) {
        e = e || window.event;
        e.preventDefault ? e.preventDefault() : e.returnValue = false;

        var eTarget = e.target || e.srcElement;

        // find root element of slide
        var clickedListItem = closest(eTarget, function (el) {
          return (el.tagName && el.tagName.toUpperCase() === 'LI');
        });

        if (!clickedListItem) {
          return;
        }

        // find index of clicked item by looping through all child nodes
        // alternatively, you may define index via data- attribute
        var clickedGallery = clickedListItem.parentElement,
          childNodes = clickedGallery.children,
          numChildNodes = childNodes.length,
          nodeIndex = 0,
          index;

        for (var i = 0; i < numChildNodes; i++) {
          if (childNodes[i].nodeType !== 1) {
            continue;
          }

          if (childNodes[i] === clickedListItem) {
            index = nodeIndex;
            break;
          }
          nodeIndex++;
        }


        if (index >= 0) {
          // open PhotoSwipe if valid index found
          openPhotoSwipe(index, clickedGallery);
        }
        return false;
      };

      // parse picture index and gallery index from URL (#&pid=1&gid=2)
      const photoswipeParseHash = function () {
        var hash = window.location.hash.substring(1),
          params = {};

        if (hash.length < 5) {
          return params;
        }

        var vars = hash.split('&');
        for (var i = 0; i < vars.length; i++) {
          if (!vars[i]) {
            continue;
          }
          var pair = vars[i].split('=');
          if (pair.length < 2) {
            continue;
          }
          params[pair[0]] = pair[1];
        }

        if (params.gid) {
          params.gid = parseInt(params.gid, 10);
        }

        return params;
      };


      // loop through all gallery elements and bind events
      const galleryElements = document.querySelectorAll(gallerySelector);

      for (let i = 0, l = galleryElements.length; i < l; i++) {
        galleryElements[i].setAttribute('data-pswp-uid', i+1);
      }

      const galleryLinks = document.getElementsByClassName('js-gallery__link');
      for (let i = 0, l = galleryLinks.length; i < l; i++) {
        galleryLinks[i].onclick = onThumbnailsClick;
      }

      // Parse URL and open gallery if it contains #&pid=3&gid=1
      const hashData = photoswipeParseHash();
      if(hashData.pid && hashData.gid) {
        openPhotoSwipe( hashData.pid ,  galleryElements[ hashData.gid - 1 ], true, true );
      }
    };

    // execute above function
    initPhotoSwipeFromDOM('.js-gallery');
  </script>
{% endif %}
{% if hasTabs === true %}
  <!-- На страницах с вкладками подключаем van11y-accessible-tab-panel-aria -->
  <script src="{{ '/static/js/van11y-accessible-tab-panel-aria.min.js' | url }}"></script>
{% endif %}
